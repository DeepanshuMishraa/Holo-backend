generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  firstName String?
  lastName  String?
  picture   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  character character[]

  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model character {
  id           String         @id @default(uuid())
  name         String
  description  String?
  story        String
  personality  String
  avatar       String?
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  conversation conversation[]

  @@map("characters")
}

model conversation {
  id          String    @id @default(uuid())
  name        String
  description String?
  characterId String
  character   character @relation(fields: [characterId], references: [id])
  message     message[]
  createdAt   DateTime  @default(now())

  @@map("conversations")
}

model message {
  id             String       @id @default(uuid())
  content        String
  role           String
  conversationId String
  conversation   conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}
